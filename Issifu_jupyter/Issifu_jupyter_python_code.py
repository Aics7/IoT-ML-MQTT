# -*- coding: utf-8 -*-
"""iotFinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RAkFxmMoiFbFNKinI8EEHklvfK6zCD60
"""

import pandas as pd
df=pd.read_csv("iotFinal.csv")
df

df.info()

df.describe()

#creating codes for heater state
heaterCodes = []
for i in df.heater:
  if(i=="ON"):
    heaterCodes.append(1)
  elif(i=="OFF"):
    heaterCodes.append(0)
  else:
    heaterCodes.append(-1)

df["heaterCode"]=heaterCodes
df

#creating codes for pump states
pumpCodes = []
for j in df.pump:
  if(j=="ON"):
    pumpCodes.append(1)
  elif(j=="OFF"):
    pumpCodes.append(0)
  else:
    pumpCodes.append(-1)

df["pumpCode"]=pumpCodes
df

df["temp1"].plot()

df["temp2"].plot()

df["ldr"].plot()

df["heaterCode"].plot()

df["humidity1"].plot()

df["humidity2"].plot()

df["pumpCode"].plot()

x=df[["temp1","temp2","heaterCode","humidity1","humidity2","pumpCode"]]
y=df["ldr"]
x

x.describe()

#making imports
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

#creating variables
train_x, val_x, train_y, val_y = train_test_split(x,y,random_state=0)

#defining and fitting model using RandomForestRegressor
ldr_model= RandomForestRegressor(random_state=1)
ldr_model.fit(train_x,train_y)
#getting predicted values
val_predictions = ldr_model.predict(val_x)
#printing error
print("Mean absolute error is: ")
print(mean_absolute_error(val_y,val_predictions))

#Printing predictions for head
print("Making predictions for the following five etries (given temp1, temp2, heaterCode, humidity1, humidity2, pumpCode): ")
print(x.head())
print("the predictions are")
print(ldr_model.predict(x.head()))

#Printing predictions for tail
print("Making predictions for the following five etries (given temp1, temp2, heaterCode, humidity1, humidity2, pumpCode): ")
print(x.tail())
print("the predictions are")
print(ldr_model.predict(x.tail()))

#Printing predictions from question
print("Making predictions for the following entry (given temp1, temp2, heaterCode, humidity1, humidity2, pumpCode):")
print("[temp1=40, temp2=20, heater=off, humidity1=60, humidity2=90, and pump =on]")
print("the prediction is: ")
#NB: on is 1 and off is 0
print(ldr_model.predict([[40,20,0,60,90,1]]))

import seaborn as sns
sns.set()

sns.relplot(x="humidity1", y="ldr", col="heater",
            hue="temp1", style="pump", size="temp2",sizes=(15, 150),
            data=df);

sns.relplot(x="temp1", y="ldr",col="heater",hue="pump", data=df);

sns.relplot(x="temp2", y="ldr",col="heater",hue="pump", data=df);

sns.relplot(x="humidity1", y="ldr",col="heater",hue="pump", data=df);

sns.relplot(x="humidity2", y="ldr",col="heater",hue="pump", data=df);

sns.relplot(x="temp1", y="humidity1",col="heater",hue="pump", data=df);

sns.relplot(x="temp1", y="humidity2",col="heater",hue="pump", data=df);

sns.relplot(x="temp2", y="humidity1",col="heater",hue="pump", data=df);

sns.relplot(x="temp2", y="humidity2",col="heater",hue="pump", data=df);

sns.relplot(x="temp1", y="ldr",col="heater",hue="pump",style="pump", data=df);

sns.relplot(x="temp1", y="temp2",col="heater",hue="ldr", size="pump", data=df);

sns.distplot(df["temp1"],bins=10)

sns.distplot(df["temp2"],bins=10)

sns.distplot(df["humidity1"],bins=10)

sns.distplot(df["humidity2"],bins=10)

sns.distplot(df["ldr"],bins=10)

sns.distplot(df["heaterCode"],bins=10)

sns.distplot(df["pumpCode"],bins=10)

sns.jointplot(data = df, x = range(2638), y = "temp1", kind='kde')

sns.jointplot(data = df, x = range(2638), y = "temp2", kind='kde')

sns.jointplot(data = df, x = range(2638), y = "humidity1", kind='kde')

sns.jointplot(data = df, x = range(2638), y = "humidity2", kind='kde')

sns.jointplot(data = df, x = range(2638), y = "ldr", kind='kde')

sns.jointplot(data = df, x = range(2638), y = "heaterCode", kind='kde')

sns.jointplot(data = df, x = range(2638), y = "pumpCode", kind='kde')

sns.boxplot(data = df, x = "heater", y = "ldr")

sns.boxplot(data = df, x = "pump", y = "ldr")

sns.boxplot(data = df, x = "heater", y = "temp1")pu

sns.boxplot(data = df, x = "heater", y = "temp2")

sns.boxplot(data = df, x = "pump", y = "temp1")

sns.boxplot(data = df, x = "pump", y = "temp2")

sns.boxplot(data = df, x = "heater", y = "humidity1")

sns.boxplot(data = df, x = "heater", y = "humidity2")

sns.boxplot(data = df, x = "pump", y = "humidity1")

sns.boxplot(data = df, x = "pump", y = "humidity2")

sns.boxplot(data = df, x = "temp1", y = "temp2")

sns.boxplot(data = df, x = "humidity1", y = "humidity2")

sns.boxplot(data = df, x = "temp1", y = "humidity1")

sns.boxplot(data = df, x = "temp2", y = "humidity2")

sns.relplot(x="ldr",y="pump", style="heater",hue="heater", data=df);

g = sns.relplot(x="temp1", y="ldr",ci=None, kind="line", data=df)
g.fig.autofmt_xdate()

g = sns.relplot(x="temp2", y="ldr",ci=None, kind="line", data=df)
g.fig.autofmt_xdate()

g = sns.relplot(x="humidity1", y="ldr",ci=None, kind="line", data=df)
g.fig.autofmt_xdate()

g = sns.relplot(x="humidity2", y="ldr",ci=None, kind="line", data=df)
g.fig.autofmt_xdate()

g = sns.relplot(x="temp1", y="temp2",ci=None, kind="line", data=df)
g.fig.autofmt_xdate()

g = sns.relplot(x="humidity1", y="humidity2",ci=None, kind="line", data=df)
g.fig.autofmt_xdate()

sns.relplot(x="temp1", y="ldr",hue="heater", style="pump",ci=None,kind="line", data=df);

sns.relplot(x="temp2", y="ldr",hue="heater", style="pump",ci=None,kind="line", data=df);

sns.relplot(x="humidity1", y="ldr",hue="heater", size="pump",ci=None,kind="line", data=df);

sns.relplot(x="humidity2", y="ldr",hue="heater", size="pump",ci=None,kind="line", data=df);

sns.relplot(x="temp1", y="temp2",hue="heater", style="pump",ci=None,kind="line", data=df);

sns.relplot(x="humidity1", y="humidity2",hue="heater", size="pump",ci=None,kind="line", data=df);

sns.relplot(x="temp1", y="ldr", hue="temp2",
            col="heater", row="pump", height=3,
            kind="line",ci=None,estimator=None, data=df);

sns.relplot(x="humidity1", y="ldr", hue="humidity2",
            col="heater", row="pump", height=3,
            kind="line",ci=None,estimator=None, data=df);

sns.relplot(x="temp1", y="ldr", hue="heater", style="heater",
            col="temp2", col_wrap=5,
            height=3, aspect=.75, linewidth=2.5,ci=None,
            kind="line", data=df.query("pump == 'OFF'"));

sns.relplot(x="temp1", y="ldr", hue="heater", style="heater",
            col="temp2", col_wrap=5,ci=None,
            height=3, aspect=.75, linewidth=2.5,
            kind="line", data=df.query("pump == 'ON'"));

sns.relplot(x="temp1", y="ldr", hue="heater", style="pump",
            col="temp2", col_wrap=5,ci=None,
            height=3, aspect=.75, linewidth=2.5,
            kind="line", data=df);

sns.relplot(x="humidity1", y="ldr", hue="heater", style="heater",
            col="humidity2", col_wrap=5,ci=None,
            height=3, aspect=.75, linewidth=2.5,
            kind="line", data=df.query("pump == 'ON'"));

sns.relplot(x="humidity1", y="ldr", hue="heater", style="heater",
            col="humidity2", col_wrap=5,ci=None,
            height=3, aspect=.75, linewidth=2.5,
            kind="line", data=df.query("pump == 'OFF'"));

sns.relplot(x="humidity1", y="ldr", hue="heater", style="pump",
            col="humidity2", col_wrap=5,ci=None,
            height=3, aspect=.75, linewidth=2.5,
            kind="line", data=df);

# This block creates a list for entries for temp1, temp2, humidity1 and humidity2
#It also finds the total number of intries and uses that to calculate number of entries per minute
temp1 = []
humidity1 = []
temp2 = []
humidity2 = []
for k1 in df.temp1:
    temp1.append(k1)

for k2 in df.temp2:   
    temp2.append(k2)

for k3 in df.humidity1:
    humidity1.append(k3)

for k4 in df.humidity2:
    humidity2.append(k4)
size=len(temp1)
print("size =" +str(size))
#the data was generated for 45 mins
num_per_min=size//45
print("num_per_min =" +str(num_per_min))

#This block of code finds the average data per minute for temp1, temp2, humidty1 and humidity2
#These data are put in a list
average_temp1_per_min=[]
average_temp2_per_min=[]
average_humidity1_per_min=[]
average_humidity2_per_min=[]
curSumt1=0
curSumt2=0
curSumh1=0
curSumh2=0
count=0
total_count=0
curAvrgt1=0
curAvrgt2=0
curAvrgh1=0
curAvrgh2=0
#goes through lists created initially and computes avarage of every 58 entries
for k in range(2638):
  count+=1
  total_count+=1

  curSumt1+=temp1[k]
  curSumt2+=temp2[k]
  curSumh1+=humidity1[k]
  curSumh2+=humidity2[k]

  if(count==58):
    #compute average and append to list
    curAvrgt1=curSumt1/count
    average_temp1_per_min.append(curAvrgt1)
    #compute average and append to list
    curAvrgt2=curSumt2/count
    average_temp2_per_min.append(curAvrgt2)
    #compute average and append to list
    curAvrgh1=curSumh1/count
    average_humidity1_per_min.append(curAvrgh1)
    #compute average and append to list
    curAvrgh2=curSumh2/count
    average_humidity2_per_min.append(curAvrgh2)

    curSumt1=0
    curSumt2=0
    curSumh1=0
    curSumh2=0
    count=0
    
  #Computes average of remaining entries (less than 58 entries)
  if(total_count==2638 and count>0):

    curAvrgt1=curSumt1/count
    average_temp1_per_min.append(curAvrgt1)

    curAvrgt2=curSumt2/count
    average_temp2_per_min.append(curAvrgt2)

    curAvrgh1=curSumh1/count
    average_humidity1_per_min.append(curAvrgh1)

    curAvrgh2=curSumh2/count
    average_humidity2_per_min.append(curAvrgh2)

    curSumt1=0
    curSumt2=0
    curSumh1=0
    curSumh2=0
    count=0

#This block of code finds the sum average of the average entry per minute
#for "temp1 and temp2" & for "humidity1 and humidity2"
time=[]
sum_avrg_temp=[]
sum_avrg_humidity=[]
for m in range(len(average_temp1_per_min)):
  av_t=(average_temp1_per_min[m]+average_temp2_per_min[m])/2
  sum_avrg_temp.append(av_t)

  av_h=(average_humidity1_per_min[m]+average_humidity2_per_min[m])/2
  sum_avrg_humidity.append(av_h)
  time.append(m)

#This block of code writes the averages to a csv file
import csv
with open('averages.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["time", "avrg_temp1", "avrg_temp2","avrg_humidity1","avrg_humidity2","sum_avrg_temp","sum_avrg_humidity"])
    for n in range(len(average_temp1_per_min)):
      writer.writerow([time[n], average_temp1_per_min[n], average_temp2_per_min[n],average_humidity1_per_min[n],average_humidity2_per_min[n],sum_avrg_temp[n],sum_avrg_humidity[n]])

df1=pd.read_csv("averages.csv")
df1.head()

sns.relplot(x="time", y="avrg_temp1", data=df1);

sns.relplot(x="time", y="avrg_temp2", data=df1);

sns.relplot(x="time", y="avrg_humidity1", data=df1);

sns.relplot(x="time", y="avrg_humidity2", data=df1);

sns.distplot(df1["avrg_temp1"],bins=10)

sns.distplot(df1["avrg_temp2"],bins=10)

sns.distplot(df1["avrg_humidity1"],bins=10)

sns.distplot(df1["avrg_humidity2"],bins=10)

sns.relplot(x="time", y="sum_avrg_temp", data=df1);

sns.relplot(x="time", y="sum_avrg_humidity", data=df1);

sns.lmplot(x="time", y="sum_avrg_temp", data=df1);

sns.lmplot(x="time", y="sum_avrg_humidity", data=df1);

sns.lmplot(x="time", y="sum_avrg_temp",order=10, data=df1);

sns.lmplot(x="time", y="sum_avrg_humidity",order=10, data=df1);

sns.distplot(df1["sum_avrg_temp"],bins=10)

sns.distplot(df1["sum_avrg_humidity"],bins=10)

sns.distplot(df1["sum_avrg_temp"],bins=10)
sns.distplot(df1["sum_avrg_humidity"],bins=10)

sns.jointplot(x="time", y="sum_avrg_temp", data=df1, kind="reg");

sns.jointplot(x="time", y="sum_avrg_humidity", data=df1, kind="reg");

sns.jointplot(data = df1, x = "time", y = "sum_avrg_temp", kind='kde')

sns.jointplot(data = df1, x = "time", y = "sum_avrg_humidity", kind='kde')

import csv

with open('sep_avrgs.csv', 'w', newline='') as file:
    writer1 = csv.writer(file)
    writer1.writerow(["time", "avrg_temp", "temp_num","avrg_humidity","humidity_num"])
    for q in range(len(average_temp1_per_min)):
      writer1.writerow([time[q], average_temp1_per_min[q],"temp1",average_humidity1_per_min[q],"humidity1"])

    for r in range(len(average_temp1_per_min)):
      writer1.writerow([time[r], average_temp2_per_min[r],"temp2",average_humidity2_per_min[r],"humidity2"])

df2=pd.read_csv("sep_avrgs.csv")
df2.head()

sns.relplot(x="time", y="avrg_temp",hue="temp_num", style="temp_num", ci=None, kind="line", data=df2);

sns.relplot(x="time", y="avrg_humidity",hue="humidity_num", style="humidity_num", ci=None, kind="line", data=df2);

sns.lmplot(x="time", y="avrg_temp",hue="temp_num",  data=df2);

sns.lmplot(x="time", y="avrg_humidity",hue="humidity_num",  data=df2);

sns.lmplot(x="time", y="avrg_temp", data=df2);

sns.lmplot(x="time", y="avrg_humidity", data=df2);

sns.boxplot(data = df2, x = "temp_num", y = "avrg_temp")

sns.boxplot(data = df2, x = "humidity_num", y = "avrg_humidity")